{
	"info": {
		"_postman_id": "120572ff-2971-4b25-9180-5cfddd61c103",
		"name": "SimpleWebApp-API-Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "43140997"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "POST - User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('success', 'token');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"    pm.expect(responseData.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Success status is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"usera\",\r\n  \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/login"
					},
					"response": []
				},
				{
					"name": "POST- User Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Success status is true\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains required user fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.user).to.exist;\r",
									"    pm.expect(responseData.user).to.have.all.keys('name', 'email', 'username', 'isBlocked', '_id', '__v');\r",
									"});\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.user).to.be.an('object').that.includes.keys('email');\r",
									"    \r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    pm.expect(responseData.user.email).to.match(emailRegex, \"Email format is invalid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Username must be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.user).to.have.property('username').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"The isBlocked value must be a boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('user');\r",
									"    pm.expect(responseData.user.isBlocked).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches the expected schema structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object').that.has.all.keys('success', 'token', 'user');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"    pm.expect(responseData.token).to.be.a('string');\r",
									"\r",
									"    pm.expect(responseData.user).to.be.an('object').that.has.all.keys('name', 'email', 'username', 'isBlocked', '_id', '__v');\r",
									"    pm.expect(responseData.user.name).to.be.a('string');\r",
									"    pm.expect(responseData.user.email).to.be.a('string');\r",
									"    pm.expect(responseData.user.username).to.be.a('string');\r",
									"    pm.expect(responseData.user.isBlocked).to.be.a('boolean');\r",
									"    pm.expect(responseData.user._id).to.be.a('string');\r",
									"    pm.expect(responseData.user.__v).to.be.a('number');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomSuffix = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
									"const username = `newUser${randomSuffix}`;\r",
									"pm.variables.set(\"new_username\", username);\r",
									"pm.variables.set(\"new_email\", `${username}@example.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New User\",\r\n  \"username\": \"{{new_username}}\",\r\n  \"email\": \"{{new_email}}\",\r\n  \"password\": \"password\"\r\n}\r\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/register"
					},
					"response": []
				},
				{
					"name": "POST- Duplicate User Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 for duplicate registration\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is shown\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"already exists\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required fields: success and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('success', 'message');\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is a boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Success status is false\", function () {\r",
									"    pm.expect(pm.response.json().success).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"DupNew User\",\r\n  \"username\": \"dupNewUser\",\r\n  \"email\": \"dnewUser@example.com\",\r\n  \"password\": \"password\"\r\n}\r\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/register"
					},
					"response": []
				},
				{
					"name": "POST - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized 401 for invalid login\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the correct error message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.equal(\"Invalid credentials\");\r",
									"});    \r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('success', 'message', 'attemptsLeft');\r",
									"});\r",
									"\r",
									"pm.test(\"Success should be a boolean value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"AttemptsLeft should be a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('attemptsLeft').that.is.a('number').and.is.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is a string and not undefined\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"invalidUser\",\r\n  \"password\": \"password\"\r\n}\r\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/login"
					},
					"response": []
				},
				{
					"name": "POST - Blocked User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized 403 for invalid login\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('success', 'message');\r",
									"});\r",
									"\r",
									"pm.test(\"Success field should be false\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.success).to.be.false;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Message field should contain specific text\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.include(\"Your account is blocked. Please contact\");\r",
									"\r",
									"}); \r",
									"pm.test(\"Success field should be a boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Message field should be a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"blocked_user\",\r\n  \"password\": \"password\"\r\n}\r\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/login"
					},
					"response": []
				},
				{
					"name": "POST- Invalid Input User Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing username returns 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains a success field that is a boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('success').that.is.a('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response schema matches the expected structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('success', 'message');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"    pm.expect(responseData.message).to.be.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New User1\",\r\n  \"email\": \"newUser1@example.com\",\r\n  \"password\": \"password\"\r\n}\r\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/register"
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Access with Valid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"AccessProtectedRoute_VaildToken\", function() {\r",
									"    const token = pm.response.json().token;\r",
									"\r",
									"    // Verify token exists before attempting logout\r",
									"    pm.expect(token).to.be.a('string').and.to.not.be.empty;\r",
									"    \r",
									"    // Perform logout request\r",
									"    pm.sendRequest({\r",
									"        url:'http://localhost:5000/api/products',\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Authorization': 'Bearer ' + token,\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    }, function(err, logoutRes) {\r",
									"        if (err) {\r",
									"            pm.expect.fail(\"Cannot access protected route: \" + err.message);\r",
									"            return;\r",
									"        }\r",
									"        \r",
									"        // Test 1: Verify status code\r",
									"        pm.test(\"Access successful with valid token\", function() {\r",
									"            pm.expect(logoutRes.code).to.eql(200);\r",
									"        });\r",
									"        \r",
									"        //Test 2: Verify token is a non-empty string\r",
									"        pm.test(\"Token must be a non-empty string\", function () {\r",
									"            const responseData = pm.response.json();\r",
									"    \r",
									"            pm.expect(responseData).to.be.an('object');\r",
									"            pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
									"        });\r",
									"        \r",
									"        // Test 3: Verify response time is less than 200ms  \r",
									"        pm.test(\"Response time is less than 200ms\", function () {\r",
									"            pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"        });\r",
									"\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2N2Q2ODUxOTM2YTg4ZTQyNWI1ZjExNjQiLCJpYXQiOjE3NTE5MzE3ODEsImV4cCI6MTc1MTkzNTM4MX0.VH5BcMnYZkcBCw2D5Qlx43naPTeHrR5JUILLZpNexQs",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"usera\",\r\n  \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/login"
					},
					"response": []
				},
				{
					"name": "Access with Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message indicates invalid or expired token\", function () {\r",
									"    const responseContentType = pm.response.headers.get('Content-Type');\r",
									"    let responseMessage;\r",
									"\r",
									"    if (responseContentType.includes('application/json')) {\r",
									"        const response = pm.response.json();\r",
									"        responseMessage = response.message || response.error;\r",
									"    } else {\r",
									"        responseMessage = pm.response.text();\r",
									"    }\r",
									"\r",
									"    pm.expect(responseMessage).to.match(/invalid|expired/i);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"secret": "",
								"addTokenTo": "header",
								"algorithm": "HS256",
								"isSecretBase64Encoded": false,
								"payload": "{}",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_123456",
								"type": "text"
							}
						],
						"url": "{{base_url}}/products"
					},
					"response": []
				},
				{
					"name": "Missing Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing token returns 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is shown\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.equal(\"No token provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response schema matches expected structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"secret": "",
								"addTokenTo": "header",
								"algorithm": "HS256",
								"isSecretBase64Encoded": false,
								"payload": "{}",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text"
							}
						],
						"url": "{{base_url}}/products"
					},
					"response": []
				}
			]
		},
		{
			"name": "Session Management",
			"item": [
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout Test Suite\", function() {\r",
									"    const token = pm.response.json().token;\r",
									"\r",
									"    // Verify token exists before attempting logout\r",
									"    pm.expect(token).to.be.a('string').and.to.not.be.empty;\r",
									"    \r",
									"    // Perform logout request\r",
									"    pm.sendRequest({\r",
									"        url:'http://localhost:5000/api/auth/logout',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Authorization': 'Bearer ' + token,\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    }, function(err, logoutRes) {\r",
									"        if (err) {\r",
									"            pm.expect.fail(\"Logout request failed: \" + err.message);\r",
									"            return;\r",
									"        }\r",
									"        \r",
									"        // Test 1: Verify status code\r",
									"        pm.test(\"Logout returns 200 OK\", function() {\r",
									"            pm.expect(logoutRes.code).to.eql(200);\r",
									"        });\r",
									"        \r",
									"        // Test 2: Verify response message\r",
									"        pm.test(\"Logout response indicates successful logout message\", function() {\r",
									"            const responseJSON = logoutRes.json();\r",
									"            pm.expect(responseJSON).to.have.property('message').that.is.a('string').and.to.equal('Logged out successfully');\r",
									"        });\r",
									"        const token = pm.response.json().token;\r",
									"        \r",
									"       // Test 3: Verify token invalidation by attempting to reuse it\r",
									"        pm.sendRequest({\r",
									"            url:'http://localhost:5000/api/products',\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Authorization': 'Bearer ' + token,\r",
									"                'Content-Type': 'application/json'\r",
									"            }\r",
									"        }, function(err, protectedRes) {\r",
									"            pm.test(\"Token should be invalid after logout\", function() {\r",
									"                pm.expect(protectedRes.code).to.eql(401);\r",
									"            });\r",
									"       \r",
									"            pm.test(\"Token Status\", function(){\r",
									"                pm.expect(protectedRes.status).to.eql(\"Unauthorized\");   \r",
									"                \r",
									"            }); \r",
									"            pm.test(\"Token status message\", function() {\r",
									"                const responseJSON = protectedRes.json();\r",
									"                console.log(protectedRes);\r",
									"                pm.expect(responseJSON).to.have.property('message').that.is.a('string').and.to.equal('Token is blacklisted');\r",
									"            });\r",
									"        }); \r",
									"        \r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer [valid_token]",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"usera\",\r\n  \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth/login"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "currentIteration",
			"value": ""
		}
	]
}
